import 'package:dart_test/dart_test.dart' as dart_test1;

import 'dart:io';
import 'dart:async';
import 'dart:collection';

main(List<String> arguments) {

  /*
  Hello World
  */
  print('Hello World');


  // Add Comment

  /*
  Boolean
  */
  var isOn = true; //this is a variable - something that will change
  print('isOn = ${isOn}');

  isOn = true;
  print('isOn = ${isOn}');

  isOn = false;
  print('isOn = ${isOn}');

  print('isOn is a ${isOn.runtimeType}');





















  //Numbers

  num age = 34;

  //Int
  int people = 6;

  //Double
  double temp = 32.06;

  //Parse an int
  int test = int.parse('12');
  print(test);

  int err = int.parse('12.09', onError: (source) => 0);
  print('err = ${err}');

  //math
  int dogyears = 7;
  int dogage = age * dogyears;
  print('Your age in dog years is: ${dogage}');



























  String hello = 'hello world';

  String name = 'Bryan Cairns';
  print('Hello ${name}');

  //get a substring
  String firstname = name.substring(0,5);
  print('firstname = ${firstname}');

  //get the index of a string
  int index = name.indexOf(' ');
  String lastname = name.substring(index).trim();
  print('lastname = ${lastname}');

  //Length
  print(name.length);

  //Contains
  print(name.contains('#'));

  //Create a list
  List parts = name.split(' ');
  print(parts);
  print(parts[0]);
  print(parts[1]);




















  // Constant

/*
  String hello = 'hello';
  const String world = 'World';

  world = 'Bryan';

  print(hello + ' ' + world);
*/



















 /* stdout.write('What is your name?\r\n');
  String name1 = stdin.readLineSync();

  name1.isEmpty ? stderr.write('Name is empty') : stdout.write('Hello ${name1} :) \r\n');
*/

  print(colors.values);
  print(colors.red);



  /*List test = [1,2,3,4];
  print('Length = ${test.length}'); // how many
  print('First item is ${test[0]}'); // zero based index

  //print(test.elementAt(1321)); //Error out of range

  List things = new List();
  things.add(1);
  things.add('cats');
  things.add(true);
  print(things);

  List<int> numbers = new List<int>();
  numbers.add(1);
  numbers.add(2);
  numbers.add(3);
  //numbers.add('cats'); - ERROR !
*/




  Set<int> numbers = new Set<int>();
  numbers.add(1);
  numbers.add(2);
  numbers.add(3);
  numbers.add(1); //added twice
  print(numbers);






















//Ordered, no index, add and remove from the start and end

  Queue items = new Queue();
  items.add(10);
  items.add(30);
  items.add(20);

  items.removeFirst();
  items.removeLast();
  items.addLast(26);
  print(items);























  //Map = key value pair

  //Map people = {'dad' : 'Bryan', 'son' : 'Chris', 'daughter' : 'Heather'};

  Map<String, String> people1 = new Map<String, String>();
  people1.putIfAbsent('dad', () => 'Bryan');
  //people.putIfAbsent('son', () => 'Bryan');
  //people.putIfAbsent('daughter', () => 'Bryan');

  print(people);
  print('Keys are ${people1.keys}');
  print('Values are ${people1.values}');
  print('Dad is ${people1['dad']}');
  print('Son is ${people1['son']}');















  print('starting');
  int age1 = 15;
  assert(age1 == 15);
  print('finished');












  age = 17;

  if(age == 43) print('You are 43 years old');
  if(age != 43) print('You are not 43 years old');

  if(age < 18) {
    print('You are a minor');
    if(age < 13) print('You are not even a teenager');
  }

  if(age > 65) {
    print('You are a senior');
    if(age > 102) print('Yo are lucky to be alive');
  }

  if(age == 21) {
    print('This is your special year');
  } else {
    print('This is just a normal year');
    if(age < 21) {
      print('You are a minor');
    } else {
      print('You are an adult');
    }
  }










/*
  int age2 = 43;


  if(age2 == 43) {
    print('You are 43 and has bills ${hasBills}');
  } else {
    bool hasBills = true;
    print('You are ${age} and has bills ${hasBills}');
  }
*/















  /*int age = 21;

  switch(age) {
    case 18:
      print('You are 18, you can vote');
      break;

    case 21:
      print('You are 21, you are an adult');
      break;

    case 65:
      print('You are 65, you can retire');
      break;

    default:
      print('Nothing special about this age');
      break;
  }

  print('Finished');
*/










  int value;
  int init = 1;
  int max = 5;

  value = init;

  do {
    print('Value in do loop is ${value}');
    value++;
  }while(value <= max);

  print('Done with do loop');

  value = init;

  while (value <= max) {
    print('Value in while loop is ${value}');
    value++;
  }
  print('Done with while loop');

  //Infinate loop
  value = init;
  do{
    print('Value = ${value}');
    value++;

    if(value == 3) {
      print('Value is 3');
      continue;
    }

    if(value > 5) {
      print('Value is greater than 5');
      break;
    }

  }while(true);

  print('Finished');
























  List people2 = ['Bryan', 'Heather', 'Chris'];

  print(people2);

  for(int i = 0; i < people2.length; i++) {
    print('Person at ${i} is ${people2[i]}');
  }

  people2.forEach((String person) {
    print(person);
  });


























  test5();
  /*sayHello('Bryan');

  print('Your age in dog years is ${dogYears(43)}');

  int wall1 = squareFeet(10,10);
  int wall2 = squareFeet(10,20);
  int wall3 = squareFeet(10,10);
  int wall4 = squareFeet(10,20);
  int ceiling = squareFeet(20,10);

  double paint = paintNeeded(wall1, wall2, wall3, wall4, ceiling);
  print('You ${paint} gallons of paint');

























  sayHello();

  download('myfile.txt');
  download('myfile2.txt',true);
*/




























  // Named Param

  int footage = squartFeet(length: 10, width: 5);
  print('Footage is ${footage}');
  download('myfile');
  download('myfile2', port: 90);













  int age3 = 43;
  var dogyears1 = calcYears;
  var catyears1 = calcYears;

  print('Your age in dog years is ${dogyears1(age: 43, multiplier: 7)}');
  print('Your age in cat years is ${catyears1(age: 43, multiplier: 12)}');






















      (){print('hello');};

  List people3 = ['Bryan', 'Heather', 'Chris'];

  people3.forEach(print);

  print('----------');
  people3.forEach((String name){
    print(name);
  });

  print('----------');

  people3.where((String name){
    switch(name){
      case 'Chris':
        return true;
      case 'Bryan':
        return false;
      case 'Heather':
        return true;
    }
  }).forEach(print);















  //Error is a program failure
  //Exemption - can be handled

  int age2;
  int dogyears2 = 7;

  print(age2 * dogyears2);
































  //Error is a program failure
  //Exemption - can be handled


  try {
    int age;
    int dogyears = 7;

    print(age * dogyears);
  }
  on NoSuchMethodError {
    print('Sorry thats not going to happen');
  }
  catch (e) {
    print('There was an error: ${e.toString()}');
  }
  finally {
    print('complete');
  }









































  try {
    int age;
    int dogYears = 8;

    if(dogYears != 7) throw new Exception('dog years must be 7');

    if(age == null) throw new NullThrownError();

    print(age * dogYears);
  }
  on NullThrownError {
    print('The value was null!!!');
  }
  on NoSuchMethodError {
    print('Sorry no such method');
  }
  catch (e) {
    print('Unknown error: ${e.toString()}');
  }
  finally {
    print('complete');
  }


  










}

int calcYears({int age, int multiplier}) {
  return age * multiplier;
}



int squartFeet({int width, int length}) {
  return width * length;
}

void download(String file, {int port: 80}) {
  print('Download ${file} on port ${port}');
}



enum colors {red, green, blue}

void sayHello([String name = '']) {
  if(name.isNotEmpty) name = name.padLeft(name.length + 1);
  print('Hello${name}');
}

void download(String file, [bool open = false]) {
  print('Downloading ${file}');
  if(open) print('Opening ${file}');
}

void test5() {
  print('testing');
}



int dogYears(int age) {
  return age * 7;
}

int squareFeet(int width, int length) {
  return width * length;
}

double paintNeeded(int wall1, int wall2, int wall3, int wall4, int ceiling){
  int footage = wall1 + wall2 + wall3 + wall4 + ceiling;
  return footage / 30;
}





























